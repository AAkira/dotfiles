# ========== File ==========
[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent><C-e> :NERDTreeToggle %<CR>
  "Launch NERDTree if there aren't arguments
  autocmd vimenter * if !argc() | NERDTree | endif

  "Close NERDTree when files close
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  
  let NERDTreeShowHidden=1
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
# install this font: font-hack-nerd-font

# ========== Auto completion ==========
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertCharPre'
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#enable_camel_case = 0
  let g:deoplete#enable_ignore_case = 0
  let g:deoplete#enable_refresh_always = 0
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#file#enable_buffer_path = 1
  let g:deoplete#max_list = 10000
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
hook_source = '''
  let g:neosnippet#enable_completed_snippet = 1
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'wokalski/autocomplete-flow'
depends = ['deoplete.nvim']
on_i = 1
hook_source = '''
  let g:autocomplete_flow#insert_paren_after_function = 0
'''

[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
depends = ['deoplete.nvim']
on_i = 1

# ========== Linter, Formatter ==========

[[plugins]]
repo = 'dense-analysis/ale'
on_i = 1
hook_add = '''
  let g:ale_sign_column_always = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 0
  
  let g:ale_linters = {
    \ 'javascript': ['eslint'],
    \ 'python': ['pyflakes', 'pep8'],
    \ 'ruby': ['rubocop'],
    \ 'text': ['textlint'],
    \ 'markdown': ['textlint'],
    \ 'css': ['stylelint'],
    \ }
  
  let g:ale_fixers = {
        \ 'javascript': ['prettier'],
        \ 'python': ['autopep8', 'isort'],
        \ }
  let g:ale_fix_on_save = 1
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
on_i = 1
depends = ['lightline.vim', 'ale']
hook_add = '''
  let g:lightline.component_expand = {
    \  'linter_checking': 'lightline#ale#checking',
    \  'linter_warnings': 'lightline#ale#warnings',
    \  'linter_errors': 'lightline#ale#errors',
    \  'linter_ok': 'lightline#ale#ok',
    \ }
  let g:lightline.component_type = {
    \  'linter_checking': 'left',
    \  'linter_warnings': 'warning',
    \  'linter_errors': 'error',
    \  'linter_ok': 'left',
    \ }
'''

# ========== Git ==========

[[plugins]]
# Show icons on left line
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_override_sign_column_highlight = 0
  highlight GitGutterAdd ctermfg=blue ctermbg=brown
  set updatetime=100
  
  " prevent to conflict the dense-analysis/ale
  set signcolumn=yes
  nnoremap <silent> <C-g><C-g> :GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
# Add the :Gdiff command
repo = "tpope/vim-fugitive"

# ========== Others ==========

# ----- markdown -----
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'cd app & yarn install'
hook_add = '''
  nmap <C-p> <Plug>MarkdownPreviewToggle
  
  let g:mkdp_auto_start = 0
  let g:mkdp_browser = 'safari'
'''

# ----- comment out -----
[[plugins]]
repo = 'tpope/vim-commentary'
on_i = 1

# ----- add and remove pairs -----
[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_i = 1
